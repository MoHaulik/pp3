<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sky Rings - WebXR Flying Game (Simplified)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <style>
    body { 
      margin: 0; 
      overflow: hidden;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #1e3c72, #2a5298);
    }
    #overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      z-index: 1;
    }
    #start-button {
      padding: 14px 28px;
      font-size: 20px;
      background: linear-gradient(135deg, rgba(255, 207, 51, 0.9), rgba(255, 125, 51, 0.9));
      color: white;
      border: none;
      border-radius: 30px;
      box-shadow: 0 4px 15px rgba(255, 177, 51, 0.5);
      cursor: pointer;
      transition: all 0.3s ease;
    }
    #status {
      margin-top: 15px;
      font-size: 16px;
      background: rgba(10, 20, 30, 0.6);
      color: white;
      padding: 12px 18px;
      border-radius: 12px;
      display: none;
    }
    #score-display {
      position: absolute;
      top: 80px;
      left: 20px;
      z-index: 1;
      font-size: 28px;
      font-weight: bold;
      color: white;
      background: rgba(10, 20, 30, 0.6);
      padding: 12px 18px;
      border-radius: 12px;
      display: none;
    }
  </style>
</head>
<body>
  <div id="overlay">
    <button id="start-button">Start Sky Rings</button>
    <div id="status"></div>
  </div>
  <div id="score-display">Score: 0</div>
  
  <script type="module">
    import * as THREE from 'https://unpkg.com/three@0.150.1/build/three.module.js';

    let camera, scene, renderer;
    let controller;
    let player;
    let clock = new THREE.Clock();
    let isPlaying = false;
    let rings = [];
    let clouds = [];
    let lastControllerRotation = new THREE.Euler();
    let lastControllerPosition = new THREE.Vector3();
    let score = 0;
    let gameSpeed = 2.5;
    let spawnInterval = 3.0;
    let lastSpawnTime = 0;
    let gameTime = 0;
    let maxGameDuration = 240;
    
    const ringColors = [
      0xffaa00,   // Golden
      0xff5500,   // Orange
      0x4deeeb,   // Cyan
      0xee4dee    // Pink
    ];
    
    // Player flight physics
    let playerVelocity = new THREE.Vector3(0, 0, -gameSpeed);
    let playerTargetRotation = new THREE.Euler(0, 0, 0);
    let playerHeight = 0;
    let playerTargetHeight = 0;
    
    // Control sensitivity multipliers
    const HORIZONTAL_SENSITIVITY = 2.0; // Increased for more responsive side-to-side
    const VERTICAL_SENSITIVITY = 5.0;   // Increased for more responsive up/down
    
    init();

    function init() {
      scene = new THREE.Scene();
      
      // Semi-transparent background for AR mode
      scene.background = new THREE.Color(0x88bbff);
      scene.background.alpha = 0.5;
      
      camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 200);

      renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.xr.enabled = true;
      renderer.setClearAlpha(0.5);
      renderer.outputEncoding = THREE.sRGBEncoding;
      document.body.appendChild(renderer.domElement);

      const ambientLight = new THREE.AmbientLight(0x6688cc, 1.5);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffdd, 2);
      directionalLight.position.set(5, 10, 2);
      scene.add(directionalLight);

      document.getElementById('start-button').addEventListener('click', startARSession);
      window.addEventListener('resize', onWindowResize);
    }

    function startARSession() {
      if (navigator.xr) {
        navigator.xr.isSessionSupported('immersive-ar').then(supported => {
          if (supported) {
            const sessionInit = {
              requiredFeatures: ['hit-test'],
              optionalFeatures: ['dom-overlay'],
              domOverlay: { root: document.body }
            };
            navigator.xr.requestSession('immersive-ar', sessionInit).then(onSessionStarted);
          } else {
            updateStatus('WebXR AR session is not supported on this device.');
          }
        });
      } else {
        updateStatus('WebXR is not supported in this browser.');
      }
    }

    function updateStatus(message) {
      const el = document.getElementById('status');
      el.style.display = 'block';
      el.textContent = message;
    }

    function updateScore(newScore) {
      score = newScore;
      const el = document.getElementById('score-display');
      el.style.display = 'block';
      el.textContent = `Score: ${score}`;
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function onSessionStarted(session) {
      renderer.xr.setReferenceSpaceType('local');
      renderer.xr.setSession(session);
      document.getElementById('start-button').style.display = 'none';
      updateStatus('Creating sky world...');
      updateScore(0);

      createSkyEnvironment();
      createPlayer();
      setupController(session);

      renderer.setAnimationLoop(render);
      session.addEventListener('end', onSessionEnd);

      isPlaying = true;
      gameTime = 0;
      updateStatus('Tilt controller to steer! Lower controller to descend!');
    }

    function onSessionEnd() {
      isPlaying = false;
      updateStatus('Game ended');
      document.getElementById('start-button').style.display = 'block';
      document.getElementById('score-display').style.display = 'none';
      
      if (player) scene.remove(player);
      
      // Clean up rings
      rings.forEach(r => scene.remove(r));
      rings = [];
      
      // Clean up clouds
      clouds.forEach(c => scene.remove(c));
      clouds = [];
      
      renderer.setAnimationLoop(null);
    }

    function createSkyEnvironment() {
      // Create a few clouds - just enough for ambiance
      for (let i = 0; i < 8; i++) {
        createCloud(Math.random() * 80 - 40, Math.random() * 15, Math.random() * -80);
      }
      
      // Create ground plane (distant ocean) - made semi-transparent
      const oceanGeom = new THREE.PlaneGeometry(300, 300);
      const oceanMat = new THREE.MeshBasicMaterial({
        color: 0x0066aa,
        transparent: true,
        opacity: 0.4
      });
      
      const ocean = new THREE.Mesh(oceanGeom, oceanMat);
      ocean.rotation.x = -Math.PI / 2;
      ocean.position.y = -10;
      scene.add(ocean);
    }

    function createCloud(x, y, z) {
      const cloudGroup = new THREE.Group();
      const numPuffs = 2; // Minimal puffs per cloud
      
      for (let i = 0; i < numPuffs; i++) {
        const size = 0.8 + Math.random() * 1.2;
        const puff = new THREE.Mesh(
          new THREE.SphereGeometry(size, 4, 3), // Minimal geometry
          new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.6
          })
        );
        
        puff.position.set(
          (Math.random() - 0.5) * 2,
          (Math.random() - 0.5) * 1,
          (Math.random() - 0.5) * 2
        );
        
        cloudGroup.add(puff);
      }
      
      cloudGroup.position.set(x, y, z);
      cloudGroup.userData = { speed: 0.1 };
      scene.add(cloudGroup);
      clouds.push(cloudGroup);
      
      return cloudGroup;
    }

    function createRing(distance) {
      const ringColor = ringColors[Math.floor(Math.random() * ringColors.length)];
      const ringGroup = new THREE.Group();
      
      // Create the main ring - minimal segments
      const torusGeom = new THREE.TorusGeometry(3, 0.3, 8, 12);
      const torusMat = new THREE.MeshBasicMaterial({
        color: ringColor,
        transparent: true,
        opacity: 0.8
      });
      
      const torus = new THREE.Mesh(torusGeom, torusMat);
      ringGroup.add(torus);
      
      // Add a simple point light for visibility
      const light = new THREE.PointLight(ringColor, 1.0, 5);
      ringGroup.add(light);
      
      // Position the ring with more varied placement
      const xOffset = Math.sin(gameTime * 0.5) * 10 + (Math.random() - 0.5) * 8;
      const yOffset = Math.cos(gameTime * 0.3) * 6 + (Math.random() - 0.5) * 6 + 5;
      
      ringGroup.position.set(
        xOffset,
        yOffset,
        -distance
      );
      
      // Limited rotation for easier gameplay
      ringGroup.rotation.y = Math.random() * Math.PI * 0.1;
      ringGroup.rotation.x = Math.random() * Math.PI * 0.1;
      
      ringGroup.userData = { 
        isRing: true,
        passed: false,
        scoreValue: 10
      };
      
      scene.add(ringGroup);
      rings.push(ringGroup);
      
      return ringGroup;
    }

    function createPlayer() {
      const playerGroup = new THREE.Group();
      
      // Create simplified glider body
      const bodyGeom = new THREE.ConeGeometry(0.2, 1, 8);
      const bodyMat = new THREE.MeshBasicMaterial({
        color: 0xdd3311
      });
      
      const body = new THREE.Mesh(bodyGeom, bodyMat);
      body.rotation.x = Math.PI / 2;
      playerGroup.add(body);
      
      // Create wings
      const wingGeom = new THREE.BoxGeometry(1.5, 0.05, 0.5);
      const wingMat = new THREE.MeshBasicMaterial({
        color: 0xffaa22
      });
      
      const wings = new THREE.Mesh(wingGeom, wingMat);
      wings.position.y = 0.1;
      wings.position.z = -0.1;
      playerGroup.add(wings);
      
      // Create tail fin
      const tailGeom = new THREE.BoxGeometry(0.5, 0.05, 0.3);
      const tail = new THREE.Mesh(tailGeom, wingMat);
      tail.position.z = -0.4;
      playerGroup.add(tail);
      
      // Add small light for visibility
      const light = new THREE.PointLight(0xffaa22, 0.7, 2);
      light.position.z = 0.2;
      playerGroup.add(light);
      
      // Start position
      playerGroup.position.set(0, 0, -3);
      player = playerGroup;
      scene.add(player);
    }

    function setupController(session) {
      controller = renderer.xr.getController(0);
      controller.addEventListener('connected', e => updateStatus(`Controller connected: ${e.data.handedness}. Tilt to steer, move up/down to control altitude!`));
      scene.add(controller);
      
      // Create simplified controller indicator
      const controllerGroup = new THREE.Group();
      const handle = new THREE.Mesh(
        new THREE.CylinderGeometry(0.02, 0.02, 0.08, 8),
        new THREE.MeshBasicMaterial({ color: 0xffaa22 })
      );
      
      handle.rotation.x = Math.PI/2;
      controllerGroup.add(handle);
      
      // Add a point light
      const light = new THREE.PointLight(0xff9900, 0.8, 0.5);
      controllerGroup.add(light);
      
      controller.add(controllerGroup);
      
      lastControllerPosition.copy(controller.position);
    }

    function spawnRings() {
      if (clock.getElapsedTime() - lastSpawnTime > spawnInterval) {
        // Increasing distance for proper spacing
        const baseDistance = 50;
        const oscillation = 15 * Math.sin(gameTime * 0.1);
        const distance = baseDistance + oscillation + Math.random() * 10;
        
        createRing(distance);
        lastSpawnTime = clock.getElapsedTime();
        
        // Maintain consistent spawn interval
        spawnInterval = Math.max(2.0, spawnInterval - 0.02);
      }
    }

    function checkRingCollisions() {
      if (!player) return;
      
      const playerPos = player.position.clone();
      
      for (let i = rings.length-1; i >= 0; i--) {
        const ring = rings[i];
        
        // Check if player has passed ring
        if (!ring.userData.passed && ring.position.z > playerPos.z) {
          // Calculate distance from player to ring center
          const ringPlanePos = ring.position.clone();
          
          // Calculate 3D distance from player to ring center
          const distToCenter = playerPos.distanceTo(ringPlanePos);
          
          // Check if player passed through the ring (increased collision radius for easier gameplay)
          if (distToCenter < 3.5) {
            // Success! Player flew through the ring
            ring.userData.passed = true;
            updateScore(score + ring.userData.scoreValue);
            updateStatus(`Great job! +${ring.userData.scoreValue} points`);
          } else {
            // Player missed the ring
            ring.userData.passed = true;
            updateStatus("Missed the ring!");
          }
        }
        
        // Remove rings that are too far behind
        if (ring.position.z > playerPos.z + 10) {
          scene.remove(ring);
          rings.splice(i, 1);
        }
      }
    }

    function handleControllerInput() {
      if (!controller || !isPlaying || !player) return;
      
      // Get controller rotation
      const rot = new THREE.Euler().setFromQuaternion(controller.quaternion);
      
      // Handle horizontal steering (left/right) with INCREASED Z rotation sensitivity
      const horizontalTurn = rot.z - lastControllerRotation.z;
      if (Math.abs(horizontalTurn) > 0.005) { // Reduced threshold for more sensitivity
        playerVelocity.x += horizontalTurn * HORIZONTAL_SENSITIVITY; // Increased multiplier
      }
      
      // Handle altitude with Y position - MUCH MORE responsive
      const verticalPos = controller.position.y - lastControllerPosition.y;
      playerTargetHeight += verticalPos * VERTICAL_SENSITIVITY; // Increased multiplier
      
      // Clamp target height to reasonable values
      playerTargetHeight = Math.max(-8, Math.min(20, playerTargetHeight));
      
      // Update last controller state
      lastControllerRotation.copy(rot);
      lastControllerPosition.copy(controller.position);
    }

    function updatePlayerPhysics(dt) {
      if (!player) return;
      
      // Apply light gravity
      playerVelocity.y -= 0.2 * dt;
      
      // Apply height control with improved response
      playerVelocity.y += (playerTargetHeight - player.position.y) * dt * 1.8; // Increased strength
      
      // Apply drag to velocity for stability
      playerVelocity.x *= 0.9;
      playerVelocity.y *= 0.9;
      
      // Maintain forward speed
      playerVelocity.z = -gameSpeed;
      
      // Apply velocity to position
      const scaledVelocity = playerVelocity.clone().multiplyScalar(dt);
      player.position.add(scaledVelocity);
      
      // Keep player from going too far forward
      if (player.position.z < -80) {
        player.position.z = -80;
      }
      
      // Rotate player based on velocity with increased tilt
      playerTargetRotation.z = -playerVelocity.x * 0.6; // Increased banking
      playerTargetRotation.x = playerVelocity.y * 0.15; // Increased pitch
      
      // Smoothly interpolate current rotation to target rotation
      player.rotation.z += (playerTargetRotation.z - player.rotation.z) * 0.15; // Faster response
      player.rotation.x += (playerTargetRotation.x - player.rotation.x) * 0.15; // Faster response
    }

    function updateClouds(dt) {
      // Simple cloud movement
      clouds.forEach(cloud => {
        // Only update clouds that are in front of the player or close behind
        if (cloud.position.z < player.position.z + 20) {
          cloud.position.z += cloud.userData.speed * dt * gameSpeed;
          
          // Reset clouds when they're behind the player
          if (cloud.position.z > player.position.z + 15) {
            cloud.position.set(
              Math.random() * 80 - 40,
              Math.random() * 15,
              player.position.z - 80
            );
          }
        }
      });
    }

    function render(time, frame) {
      const dt = Math.min(clock.getDelta(), 0.1);
      
      if (frame && isPlaying) {
        // Update game time
        gameTime += dt;
        
        handleControllerInput();
        updatePlayerPhysics(dt);
        updateClouds(dt);
        spawnRings();
        checkRingCollisions();
        
        // Gradually increase game speed with a moderate cap
        if (gameSpeed < 5.0) {
          gameSpeed += dt * 0.008;
        }
        
        // Check for game duration
        if (gameTime >= maxGameDuration) {
          updateStatus(`Game complete! Final score: ${score}`);
        }
      }
      
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>
